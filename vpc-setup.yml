---
- hosts: localhost
  connection: local
  gather_facts: False
  tasks:
    - name: Import vpc variables
      include_vars: vpc_setup_vars.yml  #vars file location

    - name: create vprofile vpc
      ec2_vpc_net:
        name: "{{vpc_name}}"  #vpc name from vars file
        cidr_block: "{{vpcCidr}}"
        region: "{{region}}"
        dns_support: yes
        dns_hostnames: yes
        tenancy: default
        state: "{{state}}"
      register: vpcout
    - debug:
        var: vpcout
    
    - name: public subnet in zone1
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{ region }}"
        az: "{{ zone1 }}"
        state: "{{state}}"
        cidr: "{{ PubSub1Cidr }}"
        map_public: yes
        resource_tags:
          Name: vprof-pub-sub1
      register: pubsub1_out
    - debug:
        var: pubsub1_out
    
    - name: public subnet in zone2
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{ region }}"
        az: "{{ zone2 }}"
        state: "{{state}}"
        cidr: "{{ PubSub2Cidr }}"
        map_public: yes
        resource_tags:
          Name: vprof-pub-sub2
      register: pubsub2_out
    - debug:
        var: pubsub2_out
    
    - name: public subnet in zone3
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{ region }}"
        az: "{{ zone3 }}"
        state: "{{state}}"
        cidr: "{{ PubSub3Cidr }}"
        map_public: yes
        resource_tags:
          Name: vprof-pub-sub3
      register: pubsub3_out
    - debug:
        var: pubsub3_out

    - name: private subnet in zone1
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{ region }}"
        az: "{{ zone1 }}"
        state: "{{state}}"
        cidr: "{{ PrivSub1Cidr }}"
        resource_tags:
          Name: vprof-pvt-sub1
      register: privsub1_out
    - debug:
        var: privsub1_out
    
    - name: private subnet in zone2
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{ region }}"
        az: "{{ zone2 }}"
        state: "{{state}}"
        cidr: "{{ PrivSub2Cidr }}"
        resource_tags:
          Name: vprof-pvt-sub2
      register: privsub2_out
    - debug:
        var: privsub2_out
    
    - name: private subnet in zone3
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{ region }}"
        az: "{{ zone3 }}"
        state: "{{state}}"
        cidr: "{{ PrivSub3Cidr }}"
        resource_tags:
          Name: vprof-pvt-sub3
      register: privsub3_out
    - debug:
        var: privsub3_out
    
    - name: internet gateway vpc-setup
      ec2_vpc_igw:
        vpc_id: "{{ vpcout.vpc.id }}"
        region: "{{ region }}"
        state: "{{ state }}"
        resource_tags:
          Name: vprofile_IGW
      register: igw_out
    - debug:
        var: igw_out

    - name: route table for public subnet
      ec2_vpc_route_table:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{ region }}"
        tags: 
          Name: Vprofile-PubRT
        subnets:
          - "{{pubsub1_out.subnet.id}}"
          - "{{pubsub1_out.subnet.id}}"
          - "{{pubsub1_out.subnet.id}}"
        routes: 
          - dest: 0.0.0.0/0
            gateway_id: "{{igw_out.gateway_id}}"   ## no confuse with gateway_id to .id
      register: pubRT_out
    - debug:
        var: pubRT_out
    
    - name: create a nat gateway and allocate new EIP if a nat gate way does not yet yet exist in the subnet
      ec2_vpc_nat_gateway:
        state: "{{state}}"
        subnet_id: "{{pubsub1_out.subnet.id}}"
        wait: yes
        region: "{{ region }}"
        if_exist_do_not_create: true
      register: NATGW_out
    - debug:
        var: NATGW_out
    
    - name: private subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        tags:
          Name: Vprofile_PrivRT
        subnets:
          - "{{privsub1_out.subnet.id}}"
          - "{{privsub2_out.subnet.id}}"
          - "{{privsub3_out.subnet.id}}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{NATGW_out.nat_gateway_id}}"
      register: privRT_out
    - debug:
        var: privRT_out

    - debug:
        var: "{{item}}"
      loop:
        - vpcout.vpc.id
        - pubsub1_out.subnet.id
        - pubsub2_out.subnet.id
        - pubsub3_out.subnet.id
        - privsub1_out.subnet.id
        - privsub2_out.subnet.id
        - privsub3_out.subnet.id
        - igw_out.gateway_id
        - pubRT_out.route_table.id
        - NATGW_out.nat_gateway_id
        - privRT_out.route_table.id
    - set_fact:
        vpcid: "{{vpcout.vpc.id}}"
        pubsub1id: "{{ pubsub1_out.subnet.id }}"
        pubsub2id: "{{ pubsub2_out.subnet.id }}"
        pubsub3id: "{{ pubsub3_out.subnet.id }}"
        privsub1id: "{{ privsub1_out.subnet.id }}"
        privsub2id: "{{ privsub2_out.subnet.id }}"
        privsub3id: "{{ privsub3_out.subnet.id }}"
        igwid: "{{ igw_out.gateway_id }}"
        pubRTid: "{{ pubRT_out.route_table.id }}"
        NATGWid: "{{ NATGW_out.nat_gateway_id }}"
        privRTid: "{{ privRT_out.route_table.id }}"
        cacheable: yes
    - name: create variables file for vpc ouput
      copy:
        content: " region: {{ region }}\nvpcid: {{vpcout.vpc.id}}\npubsub1id: {{ pubsub1_out.subnet.id }}\npubsub2id: {{ pubsub2_out.subnet.id }}\npubsub3id: {{ pubsub3_out.subnet.id }}\nprivsub1id: {{ privsub1_out.subnet.id }}\nprivsub2id: {{ privsub2_out.subnet.id }}\nprivsub3id: {{ privsub3_out.subnet.id }}\nigwid: {{ igw_out.gateway_id }}\npubRTid: {{ pubRT_out.route_table.id }}\nNATGWid: {{ NATGW_out.nat_gateway_id }}\nprivRTid: {{ privRT_out.route_table.id }}"
        dest: vpc-output_vars.yml